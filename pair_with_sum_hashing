
      // if there exist a pair with given sum in O(N) using hashing.


#include <iostream>
#include<bits/stdc++.h>
#include<boost/multiprecision/cpp_int.hpp>
using namespace std;
using namespace boost::multiprecision;
void input(vector<int> &v, int size)
{
    for(int i=0;i<size;i++)
    {
        int ele;
        cin>>ele;
        v.push_back(ele);
    }
}
int main() {
	//code
	int test;
	cin>>test;
	while(test--)
	{
	    int len,sum;
	cin>>len>>sum;                //len of array
	vector<int> v;
	input(v,len) ;               //input function
	map<int,int> mp;                //map of elements of array
	for(int i=0;i<v.size();i++)
	{
	    mp[v[i]]++;
	}
	int cnt=0;
	for(int i=0;i<v.size();i++)
	{
	    int cursum=0;
	    cursum+=v[i];
	    if((mp[sum-cursum]>=1) && (sum-cursum)!=cursum )          // if same element added twice to make the pair. so,chaecking this case
	    {
	        cnt++;
	        break;
	    }
	}
	if(cnt>0)
	{
	    cout<<"Yes"<<endl;
	}
	else
	{
	    cout<<"No"<<endl;
	}
	}
	
	return 0;
}
